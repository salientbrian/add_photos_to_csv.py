# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mkuX4X2giJ9TwaOqd5h2h-PJKiAEivps
"""

import csv
import os

def convert_weight_to_grams(pounds, ounces):
    total_ounces = (pounds * 16) + ounces
    grams = total_ounces * 28.3495  # Convert ounces to grams
    return grams

def generate_image_url(item_id):
    image_filename = f"{item_id}-001.jpg"
    base_url = "https://cdn.shopify.com/s/files/1/0627/8463/5132/products/"
    image_url = base_url + image_filename
    return image_url

def convert_ebay_to_shopify(source_file, template_file, output_file, image_folder):
    # Define the mapping of eBay columns to Shopify columns
    column_mapping = {
        'Item ID': 'Item ID',
        'Title': 'Handle',
        'Title': 'Handle',
        'Business Profile Name': 'Vendor',
        'Fixed Price eBay': 'Variant Price',
        'SKU': 'Variant SKU',
        'Qty To List': 'Variant Inventory Qty',
        'eBay Description': 'Body (HTML)',
        ('Weight Major', 'Weight Minor'): 'Variant Grams',
        'eBay Store Category1Name': 'Product Category'

            # Add more mappings as needed
    }

    # Open the source eBay CSV file
    with open(source_file, 'r', encoding='utf-8-sig') as csv_file:
        reader = csv.DictReader(csv_file)

        # Read the header from the source eBay CSV file
        header = reader.fieldnames

        # Dictionary to store image URLs for each product listing
        image_urls = {}  # Initialize the dictionary here

        # Read the header from the target (template) CSV file
        with open(template_file, 'r', encoding='utf-8-sig') as template_csv:
            header = next(template_csv).strip().split(',')

            # Add 'Item ID' to the header if it is not already present
            if 'Item ID' not in header:
                header.append('Item ID')

        # Open the output CSV file
        with open(output_file, 'w', newline='', encoding='utf-8') as output_csv:
            writer = csv.DictWriter(output_csv, fieldnames=header)
            writer.writeheader()

            # Dictionary to group image filenames for each product listing
            image_filenames = {}  # Initialize the dictionary here

            # List to store Shopify records with "Position 1" image sources
            shopify_records = []

            # Iterate over each row in the eBay CSV file
            for row in reader:
                item_id = row['Item ID']
                image_url = ''  # Initialize image_url with an empty string
                # Perform mapping and transformation for each column
                mapped_row = {}
                for ebay_column, shopify_column in column_mapping.items():
                    if ebay_column == 'eBay Description':
                        # Perform any additional transformations for 'Description' column
                        description = row[ebay_column].replace('\n', '<br>')
                        mapped_row[shopify_column] = description
                    elif ebay_column == 'Image Filename':
                        # Generate image URL for 'Image Src' column
                        item_id = row['Item ID']
                        image_url = generate_image_url(item_id)
                        mapped_row[shopify_column] = image_url
                    elif isinstance(ebay_column, tuple):
                        # Convert pounds and ounces to grams for 'Variant Grams' column
                        pounds = float(row[ebay_column[0]])
                        ounces = float(row[ebay_column[1]])
                        grams = convert_weight_to_grams(pounds, ounces)
                        mapped_row[shopify_column] = grams
                    else:
                        mapped_row[shopify_column] = row[ebay_column]

                # Process image folder to determine image positions
                for filename in os.listdir(image_folder):
                    item_id, ext = os.path.splitext(filename)
                    if item_id in image_filenames:
                        image_filenames[item_id].append(filename)
                    else:
                        image_filenames[item_id] = [filename]

                # List to store Shopify records
                shopify_records = []

                # Write rows for each image URL
                for item_id, image_list in image_urls.items():
                    for index, image_url in enumerate(image_list, start=1):
                        # If "Image Src" is not available, use the image filenames to construct the URL
                        if not image_url and item_id in image_filenames:
                            image_filenames[item_id].sort()
                            image_filename = image_filenames[item_id][index - 1]
                            image_url = os.path.join(image_folder, image_filename)

                        # Create a full Shopify record for "Position 1" and abbreviated records for others
                        if index == 1:
                            shopify_record = {
                                'Item ID': item_id,
                                'Title': row['Title'],  # Use Title from the eBay CSV
                                'Variant Price': row['Fixed Price eBay'],  # Use Fixed Price from the eBay CSV
                                'Variant SKU': row['SKU'],  # Use SKU from the eBay CSV
                                'Variant Inventory Qty': row['Qty To List'],  # Use Qty To List from the eBay CSV
                                'Body (HTML)': row['eBay Description'],  # Use eBay Description from the eBay CSV
                                'Variant Grams': grams,  # Use the calculated grams from the previous code
                                'Image Src': image_url,
                                'Image Position': index
                            }
                            shopify_records.append(shopify_record)
                        else:
                            shopify_record = {
                                'Item ID': item_id,
                                'Image Src': image_url,
                                'Image Position': index
                            }
                            shopify_records.append(shopify_record)

    # Write the Shopify records to the output CSV file
    with open(output_file, 'w', newline='', encoding='utf-8') as output_csv:
        writer = csv.DictWriter(output_csv, fieldnames=header)
        writer.writeheader()
        writer.writerows(shopify_records)

    print('Conversion completed successfully.')

# Usage example
source_file = 'ebay.csv'
template_file = 'shopifytemplate.csv'
output_file = 'output.csv'
image_folder = 'C:\PythonPrograms\Resized Images'

convert_ebay_to_shopify(source_file, template_file, output_file, image_folder)
